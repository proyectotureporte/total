import { NextRequest, NextResponse } from 'next/server'
import { checkUserAliadoExists, createAliado, getLastAliadoId } from '@/lib/sanityClient'
import { UserDataaliado } from '@/lib/sanityClient'
import bcrypt from 'bcryptjs'

// Funci√≥n mejorada para generar el siguiente ID de aliado
async function generateNextAliadoId(): Promise<string> {
  try {
    const lastId = await getLastAliadoId()
    
    let nextNumber: number
    
    if (!lastId) {
      // Si no hay aliados registrados, empezar desde 150
      nextNumber = 150
    } else {
      // Extraer el n√∫mero del √∫ltimo ID (AR-0150 -> 150)
      const lastIdNumber = parseInt(lastId.replace('AR-', ''))
      nextNumber = lastIdNumber + 1
    }
    
    // Formatear el n√∫mero con ceros a la izquierda (AR-0150)
    const formattedId = `AR-${nextNumber.toString().padStart(4, '0')}`
    
    console.log('üÜî Nuevo ID generado:', formattedId)
    return formattedId
  } catch (error) {
    console.error('‚ùå Error al generar ID de aliado:', error)
    // Si hay error, generar un ID basado en timestamp como fallback
    const timestamp = Date.now().toString().slice(-4)
    return `AR-${timestamp.padStart(4, '0')}`
  }
}

// Funci√≥n para validar datos del frontend
function validateUserData(userData: UserDataaliado): string[] {
  const errors: string[] = []
  
  // Validaciones b√°sicas
  if (!userData.nombreApellido?.trim()) errors.push('Nombre y apellido requerido')
  if (!userData.cedula?.trim()) errors.push('C√©dula requerida')
  if (!userData.correo?.trim()) errors.push('Correo requerido')
  if (!userData.celular?.trim()) errors.push('Celular requerido')
  if (!userData.ciudad?.trim()) errors.push('Ciudad requerida')
  if (!userData.sectorTrabajo?.trim()) errors.push('Sector de trabajo requerido')
  if (!userData.cargo?.trim()) errors.push('Cargo requerido')
  if (!userData.experiencia?.trim()) errors.push('Experiencia requerida')
  if (!userData.potencialClientes?.trim()) errors.push('Potencial de clientes requerido')
  if (!userData.edad?.trim()) errors.push('Edad requerida')
  if (!userData.contrasena?.trim()) errors.push('Contrase√±a requerida')
  
  // Validaciones de formato
  if (userData.cedula && !/^\d{7,10}$/.test(userData.cedula)) {
    errors.push('C√©dula debe tener entre 7 y 10 d√≠gitos')
  }
  
  if (userData.correo && !/\S+@\S+\.\S+/.test(userData.correo)) {
    errors.push('Formato de correo inv√°lido')
  }
  
  if (userData.celular && !/^\d{10}$/.test(userData.celular)) {
    errors.push('Celular debe tener 10 d√≠gitos')
  }
  
  if (userData.contrasena && userData.contrasena.length < 6) {
    errors.push('Contrase√±a debe tener al menos 6 caracteres')
  }
  
  return errors
}

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ Iniciando registro de aliado...')
    
    // Parsear los datos del request
    const userData: UserDataaliado = await request.json()
    console.log('üìù Datos recibidos:', {
      ...userData,
      contrasena: '[OCULTA]'
    })

    // Validar datos de entrada
    const validationErrors = validateUserData(userData)
    if (validationErrors.length > 0) {
      console.log('‚ùå Errores de validaci√≥n:', validationErrors)
      return NextResponse.json(
        { error: `Datos inv√°lidos: ${validationErrors.join(', ')}` },
        { status: 400 }
      )
    }

    // Normalizar datos - ASEGURAR QUE TODOS LOS CAMPOS EST√âN PRESENTES
    const normalizedData = {
      nombreApellido: userData.nombreApellido?.trim() || '',
      cedula: userData.cedula?.trim() || '',
      correo: userData.correo?.trim().toLowerCase() || '',
      celular: userData.celular?.trim() || '',
      ciudad: userData.ciudad?.trim() || '',
      sectorTrabajo: userData.sectorTrabajo?.trim() || '', // CORRECCI√ìN: Asegurar que no sea undefined
      cargo: userData.cargo?.trim() || '', // CORRECCI√ìN: Asegurar que no sea undefined
      experiencia: userData.experiencia?.trim() || '',
      potencialClientes: userData.potencialClientes?.trim() || '',
      edad: userData.edad?.trim() || '',
      contrasena: userData.contrasena?.trim() || ''
    }

    // Debug: Verificar datos normalizados
    console.log('üìã Datos normalizados:', {
      ...normalizedData,
      contrasena: '[OCULTA]'
    })

    // Verificar que sectorTrabajo y cargo no est√©n vac√≠os despu√©s de normalizar
    if (!normalizedData.sectorTrabajo) {
      console.log('‚ùå sectorTrabajo est√° vac√≠o despu√©s de normalizar')
      return NextResponse.json(
        { error: 'El sector de trabajo es obligatorio' },
        { status: 400 }
      )
    }

    if (!normalizedData.cargo) {
      console.log('‚ùå cargo est√° vac√≠o despu√©s de normalizar')
      return NextResponse.json(
        { error: 'El cargo es obligatorio' },
        { status: 400 }
      )
    }

    // Verificar si ya existe usuario con esa c√©dula o correo
    console.log('üîç Verificando si el usuario ya existe...')
    const existingUsers = await checkUserAliadoExists(normalizedData.cedula, normalizedData.correo)
    
    if (existingUsers && existingUsers.length > 0) {
      const existingUser = existingUsers[0]
      let errorMessage = 'Usuario ya registrado: '
      
      if (existingUser.cedula === normalizedData.cedula) {
        errorMessage += 'c√©dula ya existe'
      }
      if (existingUser.correo === normalizedData.correo) {
        errorMessage += existingUser.cedula === normalizedData.cedula ? 
          ' y correo ya existe' : 'correo ya existe'
      }
      
      console.log('‚ö†Ô∏è Usuario duplicado encontrado:', errorMessage)
      return NextResponse.json(
        { error: errorMessage },
        { status: 409 } // Conflict
      )
    }

    // Generar el siguiente ID de aliado
    console.log('üÜî Generando ID de aliado...')
    const aliadoId = await generateNextAliadoId()

    // Hashear la contrase√±a
    console.log('üîí Hasheando contrase√±a...')
    const hashedPassword = await bcrypt.hash(normalizedData.contrasena, 12)

    // Crear el nuevo usuario utilizando la funci√≥n optimizada
    console.log('üíæ Guardando usuario en Sanity...')
    const newUser = await createAliado(normalizedData, aliadoId, hashedPassword)

    console.log('‚úÖ Usuario creado exitosamente:', newUser._id)

    

    // Respuesta exitosa
    return NextResponse.json({
      success: true,
      message: 'Usuario registrado exitosamente',
      aliadoId: newUser.aliadoId,
      usuario: {
        id: newUser._id,
        aliadoId: newUser.aliadoId,
        nombreApellido: newUser.nombreApellido,
        correo: newUser.correo,
        sectorTrabajo: newUser.sectorTrabajo, // Incluir en respuesta para debug
        cargo: newUser.cargo, // Incluir en respuesta para debug
        fechaRegistro: newUser.fechaRegistro,
        estadoDocumentacion: newUser.estadoDocumentacion
      }
    }, { status: 201 })

  } catch (error) {
    console.error('‚ùå Error en registro de aliado:', error)
    
    // Manejo de errores m√°s espec√≠fico
    if (error instanceof Error) {
      // Error de Sanity
      if (error.message.includes('Document with ID')) {
        return NextResponse.json(
          { error: 'Error de base de datos: documento duplicado' },
          { status: 409 }
        )
      }
      
      // Error de validaci√≥n de Sanity
      if (error.message.includes('validation')) {
        console.log('‚ùå Error de validaci√≥n de Sanity:', error.message)
        return NextResponse.json(
          { error: 'Error de validaci√≥n de datos en la base de datos' },
          { status: 400 }
        )
      }
      
      // Error de conexi√≥n
      if (error.message.includes('fetch') || error.message.includes('network')) {
        return NextResponse.json(
          { error: 'Error de conexi√≥n con la base de datos' },
          { status: 503 }
        )
      }
    }
    
    // Error gen√©rico
    return NextResponse.json(
      { 
        error: 'Error interno del servidor',
        details: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
      },
      { status: 500 }
    )
  }
}